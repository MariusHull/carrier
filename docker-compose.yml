version: '3'

services:
  nginx:
    restart: always
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ../../static:/www/static
    depends_on:
      - front

  front:
    build:
      context: ./front
      dockerfile: ./Dockerfile
    image: nodejs
    container_name: nodejs
    restart: unless-stopped
    env_file: ./front/.env
    environment:
      - MONGO_USERNAME=$MONGO_USERNAME
      - MONGO_PASSWORD=$MONGO_PASSWORD
      - MONGO_HOSTNAME=db
      - MONGO_PORT=$MONGO_PORT
      - MONGO_DB=$MONGO_DB 
      - PORT=$PORT
      - NODE_ENV=development
    #   - NODE_ENV=production
    ports:
      - "3000:8888"
    #   - "host:container"
    volumes:
      - ./front:/home/node/app
      - ./front/node_modules:/home/node/app/node_modules
    networks:
      - carrier-network
    # command: ./wait-for.sh db:27017 -- /home/node/app/node_modules/.bin/nodemon app.js

  # back:
  #   build:
  #     context: ./back
  #     dockerfile: ./Dockerfile
  #   image: back-nodejs
  #   container_name: back-nodejs
  #   restart: unless-stopped
  #   env_file: ./back/.env
  #   environment:
  #     - MONGO_USERNAME=$MONGO_USERNAME
  #     - MONGO_PASSWORD=$MONGO_PASSWORD
  #     - MONGO_HOSTNAME=db
  #     - MONGO_PORT=$MONGO_PORT
  #     - MONGO_DB=$MONGO_DB 
  #     - PORT=$PORT
  #     - NODE_ENV=development
  #   #   - NODE_ENV=production
  #   ports:
  #     - "3000:9999"
  #   #   - "host:container"
  #   volumes:
  #     - .:/home/node/app
  #     - node_modules:/home/node/app/node_modules
  #   networks:
  #     - carrier-network
  #   command: ./wait-for.sh db:27017 -- /home/node/app/node_modules/.bin/nodemon app.js

  # db:
  #   image: mongo:4.1.8-xenial
  #   container_name: db
  #   restart: unless-stopped
  #   env_file: ./back/.env
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=$MONGO_USERNAME
  #     - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASSWORD
  #   volumes:  
  #     - dbdata:/data/db   
  #   networks:
  #     - carrier-network

networks:
  carrier-network:
    driver: bridge
  
  # volumes:
  #   dbdata:
  #   node_modules:
